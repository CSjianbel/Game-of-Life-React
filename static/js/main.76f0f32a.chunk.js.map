{"version":3,"sources":["Components/windowDimensions.jsx","App.jsx","index.jsx"],"names":["getWindowDimensions","dim","window","width","innerWidth","height","innerHeight","rows","Math","floor","cols","initializeBoard","initBoard","i","push","Array","from","App","dimension","useWindowDimensions","useState","simulating","setSimulating","board","setBoard","mouseDown","setMouseDown","simulatingRef","useRef","current","runSimulation","useCallback","countNeighbors","b","y","x","count","j","oY","oX","produce","boardCopy","neighbors","setTimeout","modifyBoard","newBoard","style","display","alignItems","flexDirection","padding","paddingBottom","onMouseDown","onMouseUp","position","top","className","gridTemplateColumns","map","row","cell","onClick","onMouseOver","e","nativeEvent","offsetX","offsetY","backgroundColor","border","prob","random","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.76f0f32a.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst getWindowDimensions = (dim) => {\n  const { innerWidth: width, innerHeight: height } = window;\n  const rows = Math.floor(Math.floor(height / dim) * 0.65);\n  const cols = Math.floor(Math.floor(width / dim) * 0.95);\n  return {\n    rows,\n    cols,\n  };\n};\n\nexport default getWindowDimensions;\n","import React, { useState, useCallback, useRef } from \"react\";\nimport { produce } from \"immer\";\nimport useWindowDimensions from \"./Components/windowDimensions\";\n\nconst initializeBoard = (rows, cols) => {\n  const initBoard = [];\n  for (let i = 0; i < rows; i++) {\n    initBoard.push(Array.from(Array(cols), () => false));\n  }\n  return initBoard;\n};\n\nconst App = () => {\n  const dimension = 20;\n  const { rows, cols } = useWindowDimensions(dimension);\n\n  const [simulating, setSimulating] = useState(false);\n  const [board, setBoard] = useState(initializeBoard(rows, cols));\n  const [mouseDown, setMouseDown] = useState(false);\n\n  const simulatingRef = useRef(simulating);\n  simulatingRef.current = simulating;\n\n  const runSimulation = useCallback(() => {\n    const countNeighbors = (b, y, x) => {\n      let count = 0;\n      for (let i = -1; i <= 1; i++) {\n        for (let j = -1; j <= 1; j++) {\n          // skip the middle cell\n          if (!i && !j) continue;\n          // offsets\n          const oY = y + i;\n          const oX = x + j;\n          // watch for edge cases\n          if (oY >= 0 && oY < rows && oX >= 0 && oX < cols && b[oY][oX])\n            count++;\n        }\n      }\n      return count;\n    };\n\n    if (!simulatingRef.current) return;\n    setBoard((b) => {\n      return produce(b, (boardCopy) => {\n        for (let i = 0; i < rows; i++) {\n          for (let j = 0; j < cols; j++) {\n            const neighbors = countNeighbors(b, i, j);\n            if (!b[i][j] && neighbors === 3) {\n              boardCopy[i][j] = true;\n            } else if (neighbors < 2 || neighbors > 3) {\n              boardCopy[i][j] = false;\n            }\n          }\n        }\n        return boardCopy;\n      });\n    });\n\n    setTimeout(runSimulation, 10);\n  }, [cols, rows]);\n\n  const modifyBoard = (i, j) => {\n    const newBoard = produce(board, (boardCopy) => {\n      boardCopy[i][j] = !board[i][j];\n    });\n    setBoard(newBoard);\n  };\n\n  const generateRandomBoard = (e, prob = Math.random()) => {\n    setBoard((b) => {\n      return produce(b, (boardCopy) => {\n        for (let i = 0; i < rows; i++) {\n          for (let j = 0; j < cols; j++) {\n            boardCopy[i][j] = Math.random() < prob ? true : false;\n          }\n        }\n        return boardCopy;\n      });\n    });\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        flexDirection: \"column\",\n        padding: \"50px\",\n        paddingBottom: 0,\n      }}\n      onMouseDown={() => setMouseDown(true)}\n      onMouseUp={() => setMouseDown(false)}\n    >\n      <h1 style={{ position: \"relative\", top: \"-20px\" }}>\n        Ojou Nii Sama - Conway's Game of Life\n      </h1>\n      <div\n        className=\"board\"\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: `repeat(${cols}, ${dimension}px)`,\n        }}\n      >\n        {board.map((row, i) =>\n          row.map((cell, j) => (\n            <div\n              key={`${i}-${j}`}\n              onClick={() => modifyBoard(i, j)}\n              onMouseOver={(e) => {\n                if (!mouseDown) return;\n                if (\n                  e.nativeEvent.offsetX >= 0 &&\n                  e.nativeEvent.offsetX < dimension &&\n                  e.nativeEvent.offsetY >= 0 &&\n                  e.nativeEvent.offsetY < dimension\n                ) {\n                  modifyBoard(i, j);\n                }\n              }}\n              style={{\n                width: dimension,\n                height: dimension,\n                backgroundColor: board[i][j] ? \"black\" : \"white\",\n                border: \"solid 1px black\",\n              }}\n            ></div>\n          ))\n        )}\n      </div>\n      <div className=\"dashboard\">\n        <button\n          className=\"btn\"\n          onClick={() => setBoard(initializeBoard(rows, cols))}\n        >\n          Clear Board\n        </button>\n        <button\n          className=\"btn\"\n          onClick={() => {\n            setSimulating(!simulating);\n            if (!simulating) {\n              simulatingRef.current = true;\n              runSimulation();\n            }\n          }}\n        >\n          {`${simulating ? \"Stop\" : \"Start\"} Simulation`}\n        </button>\n        <button className=\"btn\" onClick={generateRandomBoard}>\n          Generate Random Board\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}